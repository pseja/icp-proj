#include "CodeGen.hpp"
#include "fsm.hpp"
#include "state.hpp"
#include "transition.hpp"
#include "variable.hpp"
#include <QDebug>
#include <QRegularExpression>

/**
 * @brief Constructor for the CodeGen class
 * @param parent The parent QObject
 */
CodeGen::CodeGen(QObject *parent) : QObject(parent)
{
}

/**
 * @brief Generates complete C++ code from a state machine
 * 
 * This is the main entry point for code generation. It orchestrates the 
 * generation process by calling the specialized generation methods for
 * different parts of the code.
 * 
 * @param fsm The state machine to generate code from
 * @return Generated C++ code as a QString
 */
QString CodeGen::generateCode(FSM *fsm)
{
    QString code;

    // Generate file header with automaton info
    code += "/**\n";
    code += " * Generated Finite State Machine: " + fsm->getName() + "\n";
    
    // Add description if available
    QString description = fsm->getComment();
    if (!description.isEmpty()) {
        code += " * Description: " + description + "\n";
    }
    
    code += " * \n";
    code += " * This file was automatically generated by ICP FSM Code Generator\n";
    code += " */\n\n";

    // Generate the various code sections
    code += generateHeaders();
    code += generateVariableDeclarations(fsm);
    code += generateRuntimeMonitoring();
    code += generateHelperFunctions();
    code += generateQStateMachineMain(fsm);

    return code;
}

/**
 * @brief Generates standard C++ header includes
 * 
 * Creates the include statements needed for the generated code, 
 * focusing on Qt libraries for platform independence.
 * 
 * @return Code section as QString
 */
QString CodeGen::generateHeaders()
{
    QString code;
    
    // Use Qt libraries for platform independence
    code += "#include <QtCore/QDebug>\n";
    code += "#include <QtCore/QString>\n";
    code += "#include <QtCore/QMap>\n";
    code += "#include <QtCore/QDateTime>\n";
    code += "#include <QtCore/QCoreApplication>\n";
    code += "#include <QtCore/QTimer>\n";
    code += "#include <QtCore/QSocketNotifier>\n";
    code += "#include <QtCore/QStateMachine>\n";
    code += "#include <QtCore/QState>\n";
    code += "#include <QtCore/QEvent>\n";
    code += "#include <QtCore/QAbstractTransition>\n";
    code += "#include <stdio.h>\n";
    code += "#include <unistd.h>\n";
    code += "\n";
    
    return code;
}

/**
 * @brief Generates helper functions for FSM operations
 * 
 * Creates utility functions that assist with state machine operations,
 * such as input value retrieval, type conversion, and output generation.
 * 
 * @return Code section as QString
 */
QString CodeGen::generateHelperFunctions()
{
    QString code;
    
    code += "/******************************************************************************\n";
    code += " * Helper functions for FSM operations\n";
    code += " ******************************************************************************/\n\n";
    
    // Gets the string value of an input
    code += "/**\n";
    code += " * @brief Gets the string value of an input\n";
    code += " * @param input Input name\n";
    code += " * @return Current string value of the input, or empty string if not found\n";
    code += " */\n";
    code += "QString valueof(const QString &input) {\n";
    code += "    if (inputs.contains(input)) {\n";
    code += "        return inputs[input];\n";
    code += "    }\n";
    code += "    return QString();\n";
    code += "}\n\n";
    
    // Convert string to int safely
    code += "/**\n";
    code += " * @brief Safely converts a string to an integer\n";
    code += " * @param str String to convert\n";
    code += " * @return Integer value, or 0 if conversion fails\n";
    code += " */\n";
    code += "int atoi_safe(const QString &str) {\n";
    code += "    bool ok = false;\n";
    code += "    int value = str.toInt(&ok);\n";
    code += "    return ok ? value : 0;\n";
    code += "}\n\n";
    
    // Check if input exists and has value
    code += "/**\n";
    code += " * @brief Checks if an input is defined and has a non-empty value\n";
    code += " * @param input Input name to check\n";
    code += " * @return True if the input exists and has a value\n";
    code += " */\n";
    code += "bool defined(const QString &input) {\n";
    code += "    return inputs.contains(input) && !inputs[input].isEmpty();\n";
    code += "}\n\n";
    
    // Output function
    code += "/**\n";
    code += " * @brief Sends an output value to a specific port\n";
    code += " * @param port Output port name\n";
    code += " * @param value Integer value to send\n";
    code += " */\n";
    code += "void output(const QString &port, int value) {\n";
    code += "    outputs[port] = QString::number(value);\n";
    code += "    logOutputEvent(port, QString::number(value));\n";
    code += "}\n\n";
    
    return code;
}

/**
 * @brief Generates global variable declarations
 * 
 * Creates declarations for core state machine variables and any custom
 * variables defined in the state machine.
 * 
 * @param fsm State machine containing variable definitions
 * @return Code section as QString
 */
QString CodeGen::generateVariableDeclarations(FSM *fsm)
{
    QString code;
    
    code += "/******************************************************************************\n";
    code += " * Variable declarations\n";
    code += " ******************************************************************************/\n\n";
    
    // Core state machine variables
    code += "QMap<QString, QString> inputs;      // Map of input names to values\n";
    code += "QMap<QString, QString> outputs;     // Map of output names to values\n\n";
    
    // Extract custom variables from FSM
    QMap<QString, Variable*> variables = fsm->getVariables();
    if (!variables.isEmpty()) {
        code += "// Custom variables for " + fsm->getName() + "\n";
        
        for (auto it = variables.constBegin(); it != variables.constEnd(); ++it) {
            Variable* var = it.value();
            code += var->getType() + " " + var->getName() + " = " + var->getValue().toString() + ";\n";
        }
        code += "\n";
    }
    
    return code;
}

/**
 * @brief Generates monitoring and debugging functions
 * 
 * Creates functions for runtime monitoring of the state machine,
 * including state transitions, input/output events, and general
 * debugging utilities.
 * 
 * @return Code section as QString
 */
QString CodeGen::generateRuntimeMonitoring()
{
    QString code;
    
    // Add section header comment
    code += "/******************************************************************************\n";
    code += " * Runtime monitoring and debugging\n";
    code += " ******************************************************************************/\n\n";

    // Add ANSI color codes for terminal output
    code += "// ANSI color codes for terminal output\n";
    code += "const QString ANSI_RESET = \"\\033[0m\";\n";
    code += "const QString ANSI_BOLD = \"\\033[1m\";\n";
    code += "const QString ANSI_RED = \"\\033[31m\";\n";
    code += "const QString ANSI_GREEN = \"\\033[32m\";\n";
    code += "const QString ANSI_YELLOW = \"\\033[33m\";\n";
    code += "const QString ANSI_BLUE = \"\\033[34m\";\n";
    code += "const QString ANSI_MAGENTA = \"\\033[35m\";\n";
    code += "const QString ANSI_CYAN = \"\\033[36m\";\n";
    code += "const QString ANSI_WHITE = \"\\033[37m\";\n\n";

    // State change logging function
    code += "/**\n";
    code += " * @brief Logs state transitions for monitoring\n";
    code += " * @param fromState Source state name\n";
    code += " * @param toState Target state name\n";
    code += " */\n";
    code += "void logStateChange(const QString& fromState, const QString& toState) {\n";
    code += "    qint64 timeMs = QDateTime::currentDateTime().toMSecsSinceEpoch();\n";
    code += "    qDebug().noquote() << \"[\" << timeMs << \"]\" \n";
    code += "             << ANSI_BOLD + ANSI_MAGENTA + \"STATE CHANGE:\" + ANSI_RESET\n";
    code += "             << ANSI_CYAN + fromState + ANSI_RESET << \"->\"\n";
    code += "             << ANSI_GREEN + ANSI_BOLD + toState + ANSI_RESET;\n";
    code += "}\n\n";
    
    // Input event logging function
    code += "/**\n";
    code += " * @brief Logs input values for monitoring\n";
    code += " * @param input Input name\n";
    code += " * @param value Input value\n";
    code += " */\n";
    code += "void logInputEvent(const QString& input, const QString& value) {\n";
    code += "    qint64 timeMs = QDateTime::currentDateTime().toMSecsSinceEpoch();\n";
    code += "    qDebug().noquote() << \"[\" << timeMs << \"]\"\n";
    code += "             << ANSI_YELLOW + \"INPUT:\" + ANSI_RESET\n";
    code += "             << ANSI_BOLD + input + ANSI_RESET << \"=\"\n";
    code += "             << ANSI_CYAN + value + ANSI_RESET;\n";
    code += "}\n\n";
    
    // Output event logging function
    code += "/**\n";
    code += " * @brief Logs output values for monitoring\n";
    code += " * @param output Output name\n";
    code += " * @param value Output value\n";
    code += " */\n";
    code += "void logOutputEvent(const QString& output, const QString& value) {\n";
    code += "    qint64 timeMs = QDateTime::currentDateTime().toMSecsSinceEpoch();\n";
    code += "    qDebug().noquote() << \"[\" << timeMs << \"]\"\n";
    code += "             << ANSI_GREEN + \"OUTPUT:\" + ANSI_RESET\n";
    code += "             << ANSI_BOLD + output + ANSI_RESET << \"=\"\n";
    code += "             << ANSI_CYAN + value + ANSI_RESET;\n";
    code += "}\n\n";
    
    // Debug print function for general debugging messages
    code += "/**\n";
    code += " * @brief Prints a debug message with timestamp\n";
    code += " * @param message Debug message to display\n";
    code += " * @param level Debug level (0=INFO, 1=NOTICE, 2=WARNING, 3=ERROR)\n";
    code += " */\n";
    code += "void debugPrint(const QString& message, int level = 0) {\n";
    code += "    qint64 timeMs = QDateTime::currentDateTime().toMSecsSinceEpoch();\n";
    code += "    QString prefix;\n";
    code += "    switch (level) {\n";
    code += "        case 0: prefix = ANSI_BLUE + \"INFO:\" + ANSI_RESET; break;\n";
    code += "        case 1: prefix = ANSI_CYAN + \"NOTICE:\" + ANSI_RESET; break;\n";
    code += "        case 2: prefix = ANSI_YELLOW + \"WARNING:\" + ANSI_RESET; break;\n";
    code += "        case 3: prefix = ANSI_RED + \"ERROR:\" + ANSI_RESET; break;\n";
    code += "        default: prefix = \"DEBUG:\";\n";
    code += "    }\n";
    code += "    qDebug().noquote() << \"[\" << timeMs << \"]\" << prefix << message;\n";
    code += "}\n\n";

    return code;
}

/**
 * @brief Generate code for a transition
 * @param transition The transition
 * @param sourceState Source state
 * @param targetState Target state
 * @return Generated C++ code for the transition
 */
QString CodeGen::generateTransitionCode(Transition *transition, 
                                     const State *sourceState, 
                                     const State *targetState) {
    QString code;
    QString sourceName = const_cast<State*>(sourceState)->getName();
    QString targetName = const_cast<State*>(targetState)->getName();
    QString sourceLower = sourceName.toLower();
    QString targetLower = targetName.toLower();
    
    // Handle case with both condition and delay
    if (transition->isDelayedTransition() && !transition->getCondition().isEmpty()) {
        // Create a combined condition and delayed transition
        code += "    // Create condition-delayed transition: " + sourceName + " → " + targetName + "\n";
        code += "    DelayedStateTransition* " + sourceLower + "To" + targetName + "Delayed = new DelayedStateTransition(" + QString::number(transition->getDelay()) + ");\n";
        
        QString conditionCode = transition->getCondition();
        code += "    // Setup condition check for the transition\n";
        code += "    ConditionTransition* " + sourceLower + "To" + targetName + "Condition = new ConditionTransition([]() -> bool {\n";
        code += "        // Evaluate condition: " + conditionCode + "\n";
        code += "        return " + conditionCode + ";\n";
        code += "    });\n";
        
        code += "    // Chain the condition and delay: condition first, then delayed transition\n";
        code += "    " + sourceLower + "State->addTransition(" + sourceLower + "To" + targetName + "Condition);\n";
        code += "    " + sourceLower + "To" + targetName + "Condition->setTargetState(" + sourceLower + "State); // Stay in same state until delay\n";
        code += "    " + sourceLower + "State->addTransition(" + sourceLower + "To" + targetName + "Delayed);\n";
        code += "    " + sourceLower + "To" + targetName + "Delayed->setTargetState(" + targetLower + "State);\n";
        
        // Add documentation for timer start lambda
        code += "    /**\n";
        code += "     * @brief TimerStarter - Lambda that starts the delayed transition timer when condition is met\n";
        code += "     */\n";
        code += "    QObject::connect(" + sourceLower + "To" + targetName + "Condition, &QAbstractTransition::triggered, [=]() {\n";
        code += "        // Start the timer when the condition is true\n";
        code += "        debugPrint(\"Condition met, starting delay timer for \" + QString::number(" + QString::number(transition->getDelay()) + ") + \"ms\");\n";
        code += "        " + sourceLower + "To" + targetName + "Delayed->start();\n";
        code += "    });\n\n";
    }
    else if (transition->isDelayedTransition()) {
        // Create a delayed transition
        code += "    // Create delayed transition: " + sourceName + " → " + targetName + "\n";
        code += "    DelayedStateTransition* " + sourceLower + "To" + targetName + "Delayed = new DelayedStateTransition(" + QString::number(transition->getDelay()) + ");\n";
        code += "    " + sourceLower + "State->addTransition(" + sourceLower + "To" + targetName + "Delayed);\n";
        code += "    " + sourceLower + "To" + targetName + "Delayed->setTargetState(" + targetLower + "State);\n";
        
        // Add documentation for timer start lambda
        code += "    /**\n";
        code += "     * @brief TimerStarter - Lambda that starts the delayed transition timer\n";
        code += "     */\n";
        code += "    QObject::connect(" + sourceLower + "State, &QState::entered, [=]() {\n";
        code += "        // Start the timer when entering the state\n";
        code += "        " + sourceLower + "To" + targetName + "Delayed->start();\n";
        code += "    });\n\n";
    } 
    else if (!transition->getCondition().isEmpty()) {
        code += "    // Create condition transition: " + sourceName + " → " + targetName + "\n";
        
        // Add documentation for condition lambda
        code += "    /**\n";
        code += "     * @brief TransitionCondition - Lambda for evaluating the transition condition\n";
        code += "     */\n";
        
        QString conditionCode = transition->getCondition();
        
        code += "    ConditionTransition* " + sourceLower + "To" + targetName + "Condition = new ConditionTransition([]() -> bool {\n";
        code += "        // Evaluate condition: " + conditionCode + "\n";
        code += "        return " + conditionCode + ";\n";
        code += "    });\n";
        code += "    " + sourceLower + "State->addTransition(" + sourceLower + "To" + targetName + "Condition);\n";
        code += "    " + sourceLower + "To" + targetName + "Condition->setTargetState(" + targetLower + "State);\n\n";
    }
    
    return code;
}

/**
 * @brief Generates a main function that uses QStateMachine
 * 
 * Creates the main function that uses Qt's built-in QStateMachine rather
 * than a manual switch-case approach. This leverages Qt's state machine framework
 * for cleaner code and better integration with Qt's event system.
 * 
 * @param fsm FSM containing the states and transitions
 * @return Code section as QString
 */
QString CodeGen::generateQStateMachineMain(FSM *fsm)
{
    QString code;
    
    // Add section header comment
    code += "/******************************************************************************\n";
    code += " * Main function with QStateMachine\n";
    code += " ******************************************************************************/\n\n";

    // Get the initial state
    State *initial = fsm->getInitialState();
    QMap<QString, State*> allStates = fsm->getStates();
    
    QString initialStateName = initial ? initial->getName() : "UNKNOWN";

    // Add custom color constants for enhanced formatting
    code += "// Enhanced UI formatting constants\n";
    code += "const QString STATE_HEADER = ANSI_BOLD + ANSI_BLUE + \"════════ STATE: \" + ANSI_RESET;\n";
    code += "const QString COMMAND_HEADER = ANSI_BOLD + ANSI_CYAN + \"⟫ COMMAND: \" + ANSI_RESET;\n";
    code += "const QString SECTION_SEPARATOR = ANSI_CYAN + \"───────────────────────────────────────────────────\" + ANSI_RESET;\n";
    code += "const QString DOUBLE_SEPARATOR = ANSI_YELLOW + \"═══════════════════════════════════════════════════\" + ANSI_RESET;\n\n";

    // Define the classes needed for QStateMachine
    code += "/**\n";
    code += " * @brief Custom transition that evaluates a condition expression\n";
    code += " */\n";
    code += "class ConditionTransition : public QAbstractTransition {\n";
    code += "public:\n";
    code += "    /**\n";
    code += "     * @brief Constructor accepting a lambda function for the condition\n";
    code += "     * @param condition A lambda function that evaluates to a boolean\n";
    code += "     */\n";
    code += "    explicit ConditionTransition(std::function<bool()> condition)\n";
    code += "        : m_condition(std::move(condition)) {}\n\n";
    
    code += "protected:\n";
    code += "    /**\n";
    code += "     * @brief Evaluates the condition when the transition is triggered\n";
    code += "     * @param event The event triggering the transition\n";
    code += "     * @return True if the condition evaluates to true, false otherwise\n";
    code += "     */\n";
    code += "    bool eventTest(QEvent* event) override {\n";
    code += "        Q_UNUSED(event);\n";
    code += "        try {\n";
    code += "            return m_condition();\n";
    code += "        } catch (const std::exception& e) {\n";
    code += "            debugPrint(\"Error evaluating condition: \" + QString::fromStdString(e.what()), 3);\n";
    code += "            return false;\n";
    code += "        } catch (...) {\n";
    code += "            debugPrint(\"Unknown error evaluating condition\", 3);\n";
    code += "            return false;\n";
    code += "        }\n";
    code += "    }\n\n";
    
    code += "    /**\n";
    code += "     * @brief Logs the transition when it occurs\n";
    code += "     * @param event The event triggering the transition\n";
    code += "     */\n";
    code += "    void onTransition(QEvent* event) override {\n";
    code += "        Q_UNUSED(event);\n";
    code += "        debugPrint(\"Condition triggered, executing transition.\");\n";
    code += "    }\n\n";
    
    code += "private:\n";
    code += "    std::function<bool()> m_condition; ///< The condition to evaluate\n";
    code += "};\n\n";

    code += "/**\n";
    code += " * @brief Class for handling timer-based transitions using Qt's timer system\n";
    code += " */\n";
    code += "class DelayedStateTransition : public QAbstractTransition {\n";
    code += "public:\n";
    code += "    DelayedStateTransition(int delayMs) : m_delay(delayMs), m_timer(new QTimer(this)) {\n";
    code += "        m_timer->setSingleShot(true);\n";
    code += "        connect(m_timer, &QTimer::timeout, this, &DelayedStateTransition::timeout);\n";
    code += "    }\n\n";
    
    code += "    void start() {\n";
    code += "        m_timer->start(m_delay);\n";
    code += "        debugPrint(\"Started delayed transition timer for \" + QString::number(m_delay) + \"ms\");\n";
    code += "        // Show expected completion time\n";
    code += "        QDateTime expectedCompletion = QDateTime::currentDateTime().addMSecs(m_delay);\n";
    code += "        debugPrint(ANSI_BOLD + \"TIMER:\" + ANSI_RESET + \" Will expire at \" + \n";
    code += "                  ANSI_YELLOW + expectedCompletion.toString(\"hh:mm:ss.zzz\") + ANSI_RESET + \n";
    code += "                  \" (in \" + QString::number(m_delay) + \"ms)\");\n";
    code += "    }\n\n";
    
    code += "protected:\n";
    code += "    bool eventTest(QEvent* event) override {\n";
    code += "        // This only triggers on our custom timeout event\n";
    code += "        return event->type() == QEvent::User + 1;\n";
    code += "    }\n\n";
    
    code += "    void onTransition(QEvent* event) override {\n";
    code += "        Q_UNUSED(event);\n";
    code += "        debugPrint(DOUBLE_SEPARATOR);\n";
    code += "        debugPrint(ANSI_BOLD + ANSI_RED + \"TIMER EXPIRED: \" + ANSI_RESET + \"Delayed transition triggered after \" + \n";
    code += "                  ANSI_BOLD + QString::number(m_delay) + \"ms\" + ANSI_RESET);\n";
    code += "        debugPrint(DOUBLE_SEPARATOR);\n";
    code += "    }\n\n";
    
    code += "private slots:\n";
    code += "    void timeout() {\n";
    code += "        // Create a custom event to trigger the transition\n";
    code += "        QEvent* event = new QEvent(static_cast<QEvent::Type>(QEvent::User + 1));\n";
    code += "        machine()->postEvent(event);\n";
    code += "    }\n\n";
    
    code += "private:\n";
    code += "    int m_delay;\n";
    code += "    QTimer* m_timer;\n";
    code += "};\n\n";

    code += "/**\n";
    code += " * @brief Custom event for input changes\n";
    code += " */\n";
    code += "class InputEvent : public QEvent {\n";
    code += "public:\n";
    code += "    static const QEvent::Type InputChangedType = static_cast<QEvent::Type>(QEvent::User + 2);\n\n";
    
    code += "    InputEvent(const QString& name, const QString& value) \n";
    code += "        : QEvent(InputChangedType), m_name(name), m_value(value) {}\n\n";
    
    code += "    QString name() const { return m_name; }\n";
    code += "    QString value() const { return m_value; }\n\n";
    
    code += "private:\n";
    code += "    QString m_name;\n";
    code += "    QString m_value;\n";
    code += "};\n\n";

    code += "/**\n";
    code += " * @brief Main function that uses QStateMachine for state management\n";
    code += " */\n";
    code += "int main(int argc, char *argv[]) {\n";
    code += "    QCoreApplication app(argc, argv);\n";
    code += "    \n";
    code += "    // Application header with visual emphasis\n";
    code += "    qDebug().noquote() << \"\\n\" + DOUBLE_SEPARATOR;\n";
    code += "    qDebug().noquote() << ANSI_BOLD + ANSI_GREEN + \"◆ ◆ ◆  QT STATE MACHINE APPLICATION  ◆ ◆ ◆\" + ANSI_RESET;\n";
    code += "    qDebug().noquote() << DOUBLE_SEPARATOR + \"\\n\";\n";
    code += "    \n";
    code += "    debugPrint(\"Starting FSM application with QStateMachine\");\n";
    code += "    debugPrint(\"State machine name: \" + ANSI_BOLD + ANSI_GREEN + \"" + fsm->getName() + "\" + ANSI_RESET);\n";
    
    // Extract and initialize inputs/outputs
    QSet<QString> inputNames = fsm->getInputs();
    QSet<QString> outputNames = fsm->getOutputs();
    
    code += "    // Initialize inputs and outputs\n";
    for (const QString& input : inputNames) {
        code += "    inputs[QStringLiteral(\"" + input.trimmed() + "\")] = QString();\n";
    }
    
    for (const QString& output : outputNames) {
        code += "    outputs[QStringLiteral(\"" + output.trimmed() + "\")] = QString();\n";
    }
    code += "\n";
    
    // Create the state machine object
    code += "    // Create state machine\n";
    code += "    QStateMachine fsm;\n";
    code += "    fsm.setObjectName(\"" + fsm->getName() + "\");\n\n";
    
    // Enhanced state creation display
    code += "    // Create all states\n";
    code += "    debugPrint(\"Creating states...\");\n";

    // Iterate through states using the map from FSM
    for (auto it = allStates.begin(); it != allStates.end(); ++it) {
        State* state = it.value();
        QString stateName = state->getName();
        QString stateLower = stateName.toLower();
        
        code += "    QState* " + stateLower + "State = new QState(&fsm);\n";
        code += "    " + stateLower + "State->setObjectName(\"" + stateName + "\");\n";
        code += "    debugPrint(\"  Created state: \" + ANSI_CYAN + \"" + stateName + "\" + ANSI_RESET);\n";
        
        // Add onEntry code if available
        QString onEntry = state->getCode();
        if (!onEntry.isEmpty()) {
            code += "    QObject::connect(" + stateLower + "State, &QState::entered, []() {\n";
            code += "        debugPrint(DOUBLE_SEPARATOR);\n";
            code += "        debugPrint(STATE_HEADER + ANSI_BOLD + ANSI_GREEN + \"" + stateName + "\" + ANSI_RESET + \" ENTERED\");\n";
            code += "        debugPrint(SECTION_SEPARATOR);\n";
            code += "        debugPrint(\"Executing onEntry action for state: \" + ANSI_BOLD + \"" + stateName + "\" + ANSI_RESET);\n";
            code += "        " + onEntry + "\n";
            code += "        debugPrint(SECTION_SEPARATOR);\n";
            code += "    });\n";
        } else {
            // Even if no onEntry code, still provide visual feedback for state entry
            code += "    QObject::connect(" + stateLower + "State, &QState::entered, []() {\n";
            code += "        debugPrint(DOUBLE_SEPARATOR);\n";
            code += "        debugPrint(STATE_HEADER + ANSI_BOLD + ANSI_GREEN + \"" + stateName + "\" + ANSI_RESET + \" ENTERED\");\n";
            code += "        debugPrint(SECTION_SEPARATOR);\n";
            code += "    });\n";
        }
        code += "\n";
    }
    
    // Set initial state
    code += "    // Set initial state\n";
    code += "    fsm.setInitialState(" + initialStateName.toLower() + "State);\n";
    code += "    debugPrint(\"Initial state set to \" + ANSI_BOLD + ANSI_GREEN + \"" + initialStateName + "\" + ANSI_RESET);\n\n";
    
    // Create transitions between states
    code += "    // Create transitions between states\n";
    code += "    debugPrint(\"Setting up transitions...\");\n";
    
    // Iterate through all states and their transitions
    for (auto stateIt = allStates.begin(); stateIt != allStates.end(); ++stateIt) {
        State* sourceState = stateIt.value();
        QString sourceName = sourceState->getName();
        
        // Get all transitions from this state
        QList<Transition*> transitions = fsm->getTransitionsFrom(sourceState);
        
        for (Transition* transition : transitions) {
            State* targetState = transition->getTo();
            if (!targetState) continue;
            
            QString targetName = targetState->getName();
            
            // Display the transition info with condition and/or delay
            code += "    // Create transition: " + sourceName + " → " + targetName;
            
            QString condition = transition->getCondition();
            bool hasDelay = transition->isDelayedTransition();
            
            if (!condition.isEmpty() || hasDelay) {
                code += " (";
                if (!condition.isEmpty()) {
                    code += "[ " + condition + " ]";
                }
                if (hasDelay) {
                    if (!condition.isEmpty()) code += " ";
                    code += "@ " + QString::number(transition->getDelay());
                }
                code += ")";
            }
            
            code += "\n";
            
            // Generate the transition code
            code += generateTransitionCode(transition, sourceState, targetState);
        }
    }
    
    // Rest of the main function (command handling, etc.)
    code += "    // Print application usage help\n";
    code += "    qDebug().noquote() << \"\\n\" + DOUBLE_SEPARATOR;\n";
    code += "    qDebug().noquote() << ANSI_BOLD + ANSI_BLUE + \"          AVAILABLE COMMANDS          \" + ANSI_RESET;\n";
    code += "    qDebug().noquote() << DOUBLE_SEPARATOR;\n";
    code += "    qDebug().noquote() << ANSI_BOLD + \"name=value\" + ANSI_RESET + \" - Set an input value\";\n";
    code += "    qDebug().noquote() << ANSI_BOLD + \"status\" + ANSI_RESET + \"    - Show the current system state\";\n";
    code += "    qDebug().noquote() << ANSI_BOLD + \"help\" + ANSI_RESET + \"      - Show this help message\";\n";
    code += "    qDebug().noquote() << ANSI_BOLD + \"quit/exit\" + ANSI_RESET + \" - Exit the application\";\n";
    code += "    qDebug().noquote() << DOUBLE_SEPARATOR + \"\\n\";\n\n";

    // Enhanced input handling
    code += "    // Setup input handling from the terminal\n";
    code += "    FILE* terminalInput = fdopen(dup(STDIN_FILENO), \"r\");\n";
    code += "    if (!terminalInput) {\n";
    code += "        debugPrint(\"Error: Could not open terminal input\", 3);\n";
    code += "        return 1;\n";
    code += "    }\n\n";
    
    code += "    // Create a notifier for terminal input\n";
    code += "    int terminalFd = fileno(terminalInput);\n";
    code += "    QSocketNotifier* inputNotifier = new QSocketNotifier(terminalFd, QSocketNotifier::Read);\n";
    
    // Input handler lambda
    code += "    /**\n";
    code += "     * @brief TerminalInputHandler - Lambda that processes user input from the terminal\n";
    code += "     */\n";
    code += "    QObject::connect(inputNotifier, &QSocketNotifier::activated, [&]() {\n";
    code += "        // Read from the terminal\n";
    code += "        char buffer[1024];\n";
    code += "        if (fgets(buffer, sizeof(buffer), terminalInput)) {\n";
    code += "            QString line = QString::fromUtf8(buffer).trimmed();\n";
    code += "            \n";
    code += "            if (line.isEmpty()) {\n";
    code += "                // Re-enable the notifier and return\n";
    code += "                inputNotifier->setEnabled(true);\n";
    code += "                return;\n";
    code += "            }\n";
    code += "            \n";
    code += "            // Visual separator for commands\n";
    code += "            qDebug().noquote() << \"\\n\" + SECTION_SEPARATOR;\n";
    code += "            qDebug().noquote() << COMMAND_HEADER + ANSI_YELLOW + \"\\\"\" + line + \"\\\"\" + ANSI_RESET;\n";
    code += "            qDebug().noquote() << SECTION_SEPARATOR;\n";
    code += "            \n";
    code += "            if (line.contains('=')) {\n";
    code += "                int pos = line.indexOf('=');\n";
    code += "                QString name = line.left(pos);\n";
    code += "                QString value = line.mid(pos + 1);\n";
    code += "                \n";
    code += "                debugPrint(\"Processing input: \" + ANSI_BOLD + name + ANSI_RESET + \" = \" + \n";
    code += "                          ANSI_CYAN + value + ANSI_RESET);\n";
    code += "                inputs[name] = value;\n";
    code += "                logInputEvent(name, value);\n";
    code += "                \n";
    code += "                // Post input event to trigger transitions\n";
    code += "                fsm.postEvent(new InputEvent(name, value));\n";
    code += "            } else if (line == \"exit\" || line == \"quit\") {\n";
    code += "                debugPrint(ANSI_BOLD + ANSI_RED + \"Exit command received. Terminating application...\" + ANSI_RESET);\n";
    code += "                app.quit();\n";
    code += "            } else if (line == \"status\") {\n";
    code += "                // Enhanced status display\n";
    code += "                debugPrint(DOUBLE_SEPARATOR);\n";
    code += "                debugPrint(ANSI_BOLD + ANSI_BLUE + \"           SYSTEM STATUS           \" + ANSI_RESET);\n";
    code += "                debugPrint(DOUBLE_SEPARATOR);\n";
    code += "                \n";
    code += "                if (!fsm.configuration().isEmpty()) {\n";
    code += "                    QString currentState = (*fsm.configuration().begin())->objectName();\n";
    code += "                    debugPrint(\"Current state: \" + ANSI_BOLD + ANSI_GREEN + currentState + ANSI_RESET);\n";
    code += "                } else {\n";
    code += "                    debugPrint(\"No active state\");\n";
    code += "                }\n";
    code += "                \n";
    code += "                // Print inputs\n";
    code += "                if (!inputs.isEmpty()) {\n";
    code += "                    debugPrint(SECTION_SEPARATOR);\n";
    code += "                    debugPrint(ANSI_BOLD + \"INPUT VALUES:\" + ANSI_RESET);\n";
    code += "                    for (auto it = inputs.constBegin(); it != inputs.constEnd(); ++it) {\n";
    code += "                        debugPrint(\"  \" + ANSI_CYAN + it.key() + ANSI_RESET + \" = \" + \n";
    code += "                                 (it.value().isEmpty() ? ANSI_YELLOW + \"<empty>\" + ANSI_RESET : it.value()));\n";
    code += "                    }\n";
    code += "                }\n";
    code += "                \n";
    code += "                // Print outputs\n";
    code += "                if (!outputs.isEmpty()) {\n";
    code += "                    debugPrint(SECTION_SEPARATOR);\n";
    code += "                    debugPrint(ANSI_BOLD + \"OUTPUT VALUES:\" + ANSI_RESET);\n";
    code += "                    for (auto it = outputs.constBegin(); it != outputs.constEnd(); ++it) {\n";
    code += "                        debugPrint(\"  \" + ANSI_GREEN + it.key() + ANSI_RESET + \" = \" + \n";
    code += "                                 (it.value().isEmpty() ? ANSI_YELLOW + \"<empty>\" + ANSI_RESET : it.value()));\n";
    code += "                    }\n";
    code += "                }\n";
    code += "                debugPrint(DOUBLE_SEPARATOR);\n";
    code += "            } else if (line == \"help\") {\n";
    code += "                // Enhanced help display\n";
    code += "                qDebug().noquote() << \"\\n\" + DOUBLE_SEPARATOR;\n";
    code += "                qDebug().noquote() << ANSI_BOLD + ANSI_BLUE + \"          AVAILABLE COMMANDS          \" + ANSI_RESET;\n";
    code += "                qDebug().noquote() << DOUBLE_SEPARATOR;\n";
    code += "                qDebug().noquote() << ANSI_BOLD + \"name=value\" + ANSI_RESET + \" - Set an input value\";\n";
    code += "                qDebug().noquote() << ANSI_BOLD + \"status\" + ANSI_RESET + \"    - Show the current system state\";\n";
    code += "                qDebug().noquote() << ANSI_BOLD + \"help\" + ANSI_RESET + \"      - Show this help message\";\n";
    code += "                qDebug().noquote() << ANSI_BOLD + \"quit/exit\" + ANSI_RESET + \" - Exit the application\";\n";
    code += "                qDebug().noquote() << DOUBLE_SEPARATOR + \"\\n\";\n";
    code += "            } else {\n";
    code += "                debugPrint(ANSI_RED + \"Unknown command: \" + ANSI_BOLD + \"\\\"\" + line + \"\\\"\" + ANSI_RESET, 2);\n";
    code += "                debugPrint(\"Type 'help' to see available commands\");\n";
    code += "            }\n";
    code += "        }\n";
    code += "        \n";
    code += "        // Re-enable the notifier\n";
    code += "        inputNotifier->setEnabled(true);\n";
    code += "    });\n\n";
    
    // Start the state machine with enhanced output
    code += "    // Start the state machine\n";
    code += "    debugPrint(DOUBLE_SEPARATOR);\n";
    code += "    debugPrint(ANSI_BOLD + ANSI_GREEN + \"STARTING STATE MACHINE\" + ANSI_RESET);\n";
    code += "    fsm.start();\n";
    code += "    debugPrint(\"State machine started successfully\");\n";
    code += "    debugPrint(DOUBLE_SEPARATOR);\n";
    code += "    qDebug().noquote() << \"\"; // Empty line for better readability\n\n";
    
    code += "    // Run the application\n";
    code += "    int result = app.exec();\n";
    code += "    debugPrint(DOUBLE_SEPARATOR);\n";
    code += "    debugPrint(\"Application terminated with code \" + QString::number(result));\n";
    code += "    return result;\n";
    code += "}\n";
    
    return code;
}
